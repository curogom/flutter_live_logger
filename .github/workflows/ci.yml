name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.16.x'

jobs:
  # 프로젝트 상태 체크
  project-check:
    name: 🔍 Project Status Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      has-flutter-project: ${{ steps.check-flutter.outputs.has-project }}
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        
      - name: 🔍 Check Flutter Project Exists
        id: check-flutter
        run: |
          if [ -f "pubspec.yaml" ]; then
            echo "has-project=true" >> $GITHUB_OUTPUT
            echo "✅ Flutter project detected"
          else
            echo "has-project=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Flutter project not yet created - skipping Flutter-specific checks"
          fi

  # 문서 및 기본 구조 검증 (항상 실행)
  docs-and-structure:
    name: 📖 Documentation & Structure Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        
      - name: 🔍 Check Documentation Links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.github/workflows/markdown-link-check.json'
          
      - name: 📝 Check Spelling
        uses: crate-ci/typos@master
        with:
          config: .github/workflows/typos.toml
          
      - name: 📋 Verify Project Structure
        run: |
          echo "📁 Checking project structure..."
          
          # 필수 파일들 확인
          required_files=(
            "README.md"
            "README.ko.md" 
            "LICENSE"
            "CONTRIBUTING.md"
            "CODE_OF_CONDUCT.md"
            "ROADMAP.md"
          )
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file missing"
              exit 1
            fi
          done
          
          # 문서 디렉토리 확인
          if [ -d "doc" ]; then
            echo "✅ doc/ directory exists"
          else
            echo "❌ doc/ directory missing"
            exit 1
          fi
          
          echo "🎉 Project structure verification passed!"

  # 코드 품질 검사 (Flutter 프로젝트가 있을 때만 실행)
  analyze:
    name: 📊 Code Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: project-check
    if: needs.project-check.outputs.has-flutter-project == 'true'
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        
      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: 📦 Install Dependencies
        run: flutter pub get
        
      - name: ✨ Verify Formatting
        run: dart format --output=none --set-exit-if-changed .
        
      - name: 🔍 Analyze Project Source
        run: dart analyze
        
      - name: 📋 Check pub.dev Score (Allow Failure)
        run: |
          dart pub global activate pana || true
          pana --json --no-warning || echo "⚠️ pana check failed, but continuing..."
        continue-on-error: true

  # 테스트 실행 (Flutter 프로젝트가 있을 때만 실행)
  test:
    name: 🧪 Run Tests  
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: project-check
    if: needs.project-check.outputs.has-flutter-project == 'true'
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        
      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: 📦 Install Dependencies
        run: flutter pub get
        
      - name: 🧪 Run Tests
        run: flutter test --coverage
      
      - name: 📊 Upload Coverage to Codecov (Optional)
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false
        continue-on-error: true

  # 플랫폼 호환성 검사 (간소화)
  compatibility:
    name: 🔧 Platform Compatibility
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: project-check
    if: needs.project-check.outputs.has-flutter-project == 'true'
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        
      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: 📦 Install Dependencies
        run: flutter pub get
        
      - name: 🧪 Run Tests
        run: flutter test
      
      - name: 🏗️ Check Library Build (Dry Run)
        run: |
          echo "📦 Checking if library can be built..."
          flutter pub publish --dry-run || echo "⚠️ Publish dry-run issues found, but continuing..."
        continue-on-error: true

  # 모든 체크가 성공했을 때만 실행
  all-checks-pass:
    name: ✅ All Checks Passed
    needs: [project-check, docs-and-structure, analyze, test, compatibility]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 🎉 All Checks Successful
        if: ${{ !(contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) }}
        run: |
          echo "🎊 All available quality checks passed successfully!"
          if [ "${{ needs.project-check.outputs.has-flutter-project }}" == "true" ]; then
            echo "✅ Flutter project checks included"
          else
            echo "ℹ️ Flutter project not yet created - basic structure checks only"
          fi
        
      - name: ❌ Some Checks Failed  
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: |
          echo "❌ Some quality checks failed - but this is normal during development:"
          echo "Project Check: ${{ needs.project-check.result }}"
          echo "Docs & Structure: ${{ needs.docs-and-structure.result }}"
          echo "Code Analysis: ${{ needs.analyze.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Compatibility: ${{ needs.compatibility.result }}"
          echo ""
          echo "💡 Focus on fixing failed checks step by step"
          exit 1 