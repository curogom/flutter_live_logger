name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/package-separation-v0.2.0 ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.24.x'

jobs:
  # 프로젝트 구조 검증
  structure-check:
    name: 🔍 Monorepo Structure Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      core-package-exists: ${{ steps.check-packages.outputs.core-exists }}
      dashboard-package-exists: ${{ steps.check-packages.outputs.dashboard-exists }}
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        
      - name: 🔍 Check Package Structure
        id: check-packages
        run: |
          # Core 패키지 확인
          if [ -f "packages/flutter_live_logger/pubspec.yaml" ]; then
            echo "core-exists=true" >> $GITHUB_OUTPUT
            echo "✅ Core package detected"
          else
            echo "core-exists=false" >> $GITHUB_OUTPUT
            echo "❌ Core package missing"
          fi
          
          # Dashboard 패키지 확인
          if [ -f "packages/flutter_live_logger_dashboard/pubspec.yaml" ]; then
            echo "dashboard-exists=true" >> $GITHUB_OUTPUT
            echo "✅ Dashboard package detected"
          else
            echo "dashboard-exists=false" >> $GITHUB_OUTPUT
            echo "❌ Dashboard package missing"
          fi
          
      - name: 📋 Verify Monorepo Structure
        run: |
          echo "📁 Checking monorepo structure..."
          
          # 필수 프로젝트 레벨 파일들 확인
          required_files=(
            "LICENSE"
            "CONTRIBUTING.md"
            "CODE_OF_CONDUCT.md"
            ".gitignore"
          )
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file missing"
              exit 1
            fi
          done
          
          # 패키지 디렉토리 확인
          if [ -d "packages" ]; then
            echo "✅ packages/ directory exists"
          else
            echo "❌ packages/ directory missing"
            exit 1
          fi
          
          echo "🎉 Monorepo structure verification passed!"

  # 문서 검증 (패키지별)
  docs-check:
    name: 📖 Documentation Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: structure-check
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        
      - name: 🔍 Check Core Package Documentation
        if: needs.structure-check.outputs.core-package-exists == 'true'
        run: |
          cd packages/flutter_live_logger
          echo "📖 Checking core package documentation..."
          
          required_docs=(
            "README.md"
            "README.ko.md"
            "CHANGELOG.md"
            "LICENSE"
          )
          
          for doc in "${required_docs[@]}"; do
            if [ -f "$doc" ]; then
              echo "✅ Core: $doc exists"
            else
              echo "❌ Core: $doc missing"
              exit 1
            fi
          done
          
      - name: 🔍 Check Dashboard Package Documentation
        if: needs.structure-check.outputs.dashboard-package-exists == 'true'
        run: |
          cd packages/flutter_live_logger_dashboard
          echo "📖 Checking dashboard package documentation..."
          
          required_docs=(
            "README.md"
            "README.ko.md"
            "CHANGELOG.md"
            "LICENSE"
          )
          
          for doc in "${required_docs[@]}"; do
            if [ -f "$doc" ]; then
              echo "✅ Dashboard: $doc exists"
            else
              echo "❌ Dashboard: $doc missing"
              exit 1
            fi
          done

  # Core 패키지 분석
  analyze-core:
    name: 📊 Core Package Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: structure-check
    if: needs.structure-check.outputs.core-package-exists == 'true'
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        
      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: 📦 Install Core Dependencies
        run: |
          cd packages/flutter_live_logger
          flutter pub get
        
      - name: ✨ Verify Core Formatting
        run: |
          cd packages/flutter_live_logger
          dart format --output=none --set-exit-if-changed .
        
      - name: 🔍 Analyze Core Package
        run: |
          cd packages/flutter_live_logger
          dart analyze --no-fatal-warnings

  # Dashboard 패키지 분석
  analyze-dashboard:
    name: 📊 Dashboard Package Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: structure-check
    if: needs.structure-check.outputs.dashboard-package-exists == 'true'
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        
      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: 📦 Install Dashboard Dependencies
        run: |
          cd packages/flutter_live_logger_dashboard
          flutter pub get
        
      - name: 🧹 Clean Dashboard build artifacts
        run: |
          cd packages/flutter_live_logger_dashboard
          flutter packages pub run build_runner clean
        
      - name: 🔧 Generate Dashboard code
        run: |
          cd packages/flutter_live_logger_dashboard
          dart run build_runner build --delete-conflicting-outputs
        
      - name: ✨ Verify Dashboard Formatting
        run: |
          cd packages/flutter_live_logger_dashboard
          dart format --output=none --set-exit-if-changed .
        
      - name: 🔍 Analyze Dashboard Package
        run: |
          cd packages/flutter_live_logger_dashboard
          dart analyze --no-fatal-warnings

  # Core 패키지 테스트
  test-core:
    name: 🧪 Core Package Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: structure-check
    if: needs.structure-check.outputs.core-package-exists == 'true'
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        
      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: 📦 Install Core Dependencies
        run: |
          cd packages/flutter_live_logger
          flutter pub get
        
      - name: 🧪 Run Core Tests
        run: |
          cd packages/flutter_live_logger
          flutter test --coverage --coverage-path=coverage/lcov.info
      
      - name: 📊 Upload Core Coverage
        uses: codecov/codecov-action@v3
        with:
          file: packages/flutter_live_logger/coverage/lcov.info
          flags: core
          name: core-coverage
          fail_ci_if_error: false
        continue-on-error: true

  # Dashboard 패키지 테스트
  test-dashboard:
    name: 🧪 Dashboard Package Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: structure-check
    if: needs.structure-check.outputs.dashboard-package-exists == 'true'
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        
      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: 📦 Install Dashboard Dependencies
        run: |
          cd packages/flutter_live_logger_dashboard
          flutter pub get
        
      - name: 🧹 Clean Dashboard build artifacts for tests
        run: |
          cd packages/flutter_live_logger_dashboard
          flutter packages pub run build_runner clean
        
      - name: 🔧 Generate Dashboard code for tests
        run: |
          cd packages/flutter_live_logger_dashboard
          dart run build_runner build --delete-conflicting-outputs
        
      - name: 🧪 Run Dashboard Tests
        run: |
          cd packages/flutter_live_logger_dashboard
          flutter test --coverage --coverage-path=coverage/lcov.info
        continue-on-error: true
      
      - name: 📊 Upload Dashboard Coverage
        uses: codecov/codecov-action@v3
        with:
          file: packages/flutter_live_logger_dashboard/coverage/lcov.info
          flags: dashboard
          name: dashboard-coverage
          fail_ci_if_error: false
        continue-on-error: true

  # 패키지 호환성 검사
  package-validation:
    name: 📦 Package Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [structure-check, analyze-core, analyze-dashboard]
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        
      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: 🏗️ Validate Core Package
        if: needs.structure-check.outputs.core-package-exists == 'true'
        run: |
          cd packages/flutter_live_logger
          flutter pub get
          echo "📦 Checking core package publishability..."
          dart pub publish --dry-run || echo "⚠️ Core publish dry-run issues found"
        continue-on-error: true
        
      - name: 🏗️ Validate Dashboard Package
        if: needs.structure-check.outputs.dashboard-package-exists == 'true'
        run: |
          cd packages/flutter_live_logger_dashboard
          flutter pub get
          echo "📦 Checking dashboard package publishability..."
          dart pub publish --dry-run || echo "⚠️ Dashboard publish dry-run issues found"
        continue-on-error: true

  # Example 프로젝트 테스트
  test-examples:
    name: 🚀 Example Projects Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [structure-check, test-core]
    if: needs.structure-check.outputs.core-package-exists == 'true'
    
    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4
        
      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          
      - name: 🧪 Test Core Example
        run: |
          if [ -d "packages/flutter_live_logger/example" ]; then
            cd packages/flutter_live_logger/example
            flutter pub get
            flutter analyze
            flutter test || echo "⚠️ Core example tests failed"
          fi
        continue-on-error: true
        
      - name: 🧪 Test Root Example
        run: |
          if [ -f "example/pubspec.yaml" ]; then
            cd example
            flutter pub get
            flutter analyze
            echo "✅ Root example project analyzed successfully"
          fi
        continue-on-error: true

  # 최종 성공 체크
  all-checks-pass:
    name: ✅ All Checks Passed
    needs: [structure-check, docs-check, analyze-core, analyze-dashboard, test-core, test-dashboard, package-validation, test-examples]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 🎉 All Checks Successful
        if: ${{ !(contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) }}
        run: |
          echo "🎊 All available quality checks passed successfully!"
          echo "📦 Monorepo structure: ✅"
          echo "📖 Documentation: ✅"
          echo "🔍 Code analysis: ✅"
          echo "🧪 Tests: ✅"
          echo "📋 Package validation: ✅"
          echo ""
          echo "🚀 Ready for deployment!" 